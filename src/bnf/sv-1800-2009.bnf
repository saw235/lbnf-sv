-- A.1 Source Text (Done)
-- A.1.1 Library Source Text (Done)
rules library_text ::= [library_description];

rules library_description ::= library_declaration | include_statement 
                            | config_declaration | ";";

rules library_declaration ::= 
"library" library_identifier [file_path_spec] ";"
| "library" library_identifier [file_path_spec] "-incdir" [file_path_spec] ";"

rules include_statement ::= "include" file_path_spec";";


-- A.1.2 System Verilog Source Text (Done)
rules source_text ::= timeunits_declaration [description] | [description];
rules description ::= module_declaration 
                    | udp_declaration 
                    | interface_declaration 
                    | program_declaration 
                    | package_declaration 
                    | [attribute_instance] package_item 
                    | [attribute_instance] bind_directive 
                    | config_declaration ;

rules module_nonansi_header ::=  
[ attribute_instance ] module_keyword module_identifier [ package_import_declaration ] list_of_ports ";" |
[ attribute_instance ] module_keyword lifetime module_identifier [ package_import_declaration ] list_of_ports ";" |
[ attribute_instance ] module_keyword module_identifier [ package_import_declaration ] parameter_port_list list_of_ports ";" |
[ attribute_instance ] module_keyword lifetime module_identifier [ package_import_declaration ] parameter_port_list list_of_ports ";";

rules module_ansi_header ::= 
[ attribute_instance ] module_keyword module_identifier [ package_import_declaration ] ";" |
[ attribute_instance ] module_keyword module_identifier [ package_import_declaration ] list_of_port_declarations ";" |
[ attribute_instance ] module_keyword module_identifier [ package_import_declaration ] parameter_port_list ";" |
[ attribute_instance ] module_keyword module_identifier [ package_import_declaration ] parameter_port_list list_of_port_declarations ";" |
[ attribute_instance ] module_keyword lifetime module_identifier [ package_import_declaration ] ";" |
[ attribute_instance ] module_keyword lifetime module_identifier [ package_import_declaration ] list_of_port_declarations ";" |
[ attribute_instance ] module_keyword lifetime module_identifier [ package_import_declaration ] parameter_port_list ";" |
[ attribute_instance ] module_keyword lifetime module_identifier [ package_import_declaration ] parameter_port_list list_of_port_declarations ";";

rules module_declaration ::= 
module_nonansi_header { module_item } "endmodule" | 
module_nonansi_header { module_item } "endmodule" ":" module_identifier | 
module_nonansi_header timeunits_declaration { module_item } "endmodule" | 
module_nonansi_header timeunits_declaration { module_item } "endmodule" ":" module_identifier | 
module_ansi_header { non_port_module_item } "endmodule" | 
module_ansi_header { non_port_module_item } "endmodule" ":" module_identifier | 
module_ansi_header timeunits_declaration { non_port_module_item } "endmodule" | 
module_ansi_header timeunits_declaration { non_port_module_item } "endmodule" ":" module_identifier | 
[ attribute_instance ] module_keyword module_identifier "( .* ) ;" { module_item } "endmodule" | 
[ attribute_instance ] module_keyword module_identifier "( .* ) ;" { module_item } "endmodule" ":" module_identifier | 
[ attribute_instance ] module_keyword module_identifier "( .* ) ;" timeunits_declaration { module_item } "endmodule" | 
[ attribute_instance ] module_keyword module_identifier "( .* ) ;" timeunits_declaration { module_item } "endmodule" ":" module_identifier |
[ attribute_instance ] module_keyword lifetime module_identifier "( .* ) ;" { module_item } "endmodule" | 
[ attribute_instance ] module_keyword lifetime module_identifier "( .* ) ;" { module_item } "endmodule" ":" module_identifier |
[ attribute_instance ] module_keyword lifetime module_identifier "( .* ) ;" timeunits_declaration { module_item } "endmodule" | 
[ attribute_instance ] module_keyword lifetime module_identifier "( .* ) ;" timeunits_declaration { module_item } "endmodule" ":" module_identifier |
"extern" module_nonansi_header |
"extern" module_ansi_header;

rules module_keyword ::= "module" | "macromodule";

rules interface_declaration ::= 
interface_nonansi_header { interface_item } "endinterface" | 
interface_nonansi_header { interface_item } "endinterface" ":" interface_identifier  | 
interface_nonansi_header timeunits_declaration { interface_item } "endinterface" | 
interface_nonansi_header timeunits_declaration { interface_item } "endinterface" ":" interface_identifier  |
interface_ansi_header { interface_item } "endinterface" | 
interface_ansi_header { interface_item } "endinterface" ":" interface_identifier  | 
interface_ansi_header timeunits_declaration { non_port_interface_item } "endinterface" | 
interface_ansi_header timeunits_declaration { non_port_interface_item } "endinterface" ":" interface_identifier  |
[ attribute_instance ] "interface" interface_identifier "( .* ) ;" { interface_item } "endinterface" |  
[ attribute_instance ] "interface" interface_identifier "( .* ) ;" { interface_item } "endinterface" ":" interface_identifier  |
[ attribute_instance ] "interface" interface_identifier "( .* ) ;" timeunits_declaration { interface_item } "endinterface" |  
[ attribute_instance ] "interface" interface_identifier "( .* ) ;" timeunits_declaration { interface_item } "endinterface" ":" interface_identifier  |
"extern" interface_nonansi_header | 
"extern" interface_ansi_header;


rules interface_nonansi_header ::= 
[ attribute_instance ] "interface" interface_identifier [ package_import_declaration ] list_of_ports ";" |
[ attribute_instance ] "interface" interface_identifier [ package_import_declaration ] parameter_port_list list_of_ports ";" |
[ attribute_instance ] "interface" lifetime interface_identifier [ package_import_declaration ] list_of_ports ";" |
[ attribute_instance ] "interface" lifetime interface_identifier [ package_import_declaration ] parameter_port_list list_of_ports ";";

rules interface_ansi_header ::= 
[ attribute_instance ] "interface" interface_identifier [ package_import_declaration ] ";" |
[ attribute_instance ] "interface" interface_identifier [ package_import_declaration ] list_of_port_declarations ";" |
[ attribute_instance ] "interface" interface_identifier [ package_import_declaration ] parameter_port_list ";" |
[ attribute_instance ] "interface" interface_identifier [ package_import_declaration ] parameter_port_list list_of_port_declarations ";" |
[ attribute_instance ] "interface" lifetime interface_identifier [ package_import_declaration ] ";" |
[ attribute_instance ] "interface" lifetime interface_identifier [ package_import_declaration ] list_of_port_declarations ";" |
[ attribute_instance ] "interface" lifetime interface_identifier [ package_import_declaration ] parameter_port_list ";" |
[ attribute_instance ] "interface" lifetime interface_identifier [ package_import_declaration ] parameter_port_list list_of_port_declarations ";";

rules program_declaration ::= 
program_nonansi_header { program_item } "endprogram" | 
program_nonansi_header { program_item } "endprogram" ":" program_identifier | 
program_nonansi_header timeunits_declaration { program_item } "endprogram" | 
program_nonansi_header timeunits_declaration { program_item } "endprogram" ":" program_identifier | 
program_ansi_header { program_item } "endprogram" | 
program_ansi_header { program_item } "endprogram" ":" program_identifier | 
program_ansi_header timeunits_declaration { non_port_program_item } "endprogram" | 
program_ansi_header timeunits_declaration { non_port_program_item } "endprogram" ":" program_identifier | 
[ attribute_instance ] "program" program_identifier "( .* ) ;" { program_item } "endprogram" | 
[ attribute_instance ] "program" program_identifier "( .* ) ;" { program_item } "endprogram" ":" program_identifier | 
[ attribute_instance ] "program" program_identifier "( .* ) ;" timeunits_declaration { program_item } "endprogram" | 
[ attribute_instance ] "program" program_identifier "( .* ) ;" timeunits_declaration { program_item } "endprogram" ":" program_identifier | 
"extern" program_nonansi_header | 
"extern" program_ansi_header;

rules program_nonansi_header ::= 
[ attribute_instance ] "program" program_identifier [ package_import_declaration ] list_of_ports ";" |
[ attribute_instance ] "program" program_identifier [ package_import_declaration ] parameter_port_list list_of_ports ";" |
[ attribute_instance ] "program" lifetime program_identifier [ package_import_declaration ] list_of_ports ";" |
[ attribute_instance ] "program" lifetime program_identifier [ package_import_declaration ] parameter_port_list list_of_ports ";";

rules program_ansi_header ::= 
[ attribute_instance ] "program" program_identifier [ package_import_declaration ] ";" |
[ attribute_instance ] "program" program_identifier [ package_import_declaration ] list_of_port_declarations ";" |
[ attribute_instance ] "program" program_identifier [ package_import_declaration ] parameter_port_list ";" |
[ attribute_instance ] "program" program_identifier [ package_import_declaration ] parameter_port_list list_of_port_declarations ";" |
[ attribute_instance ] "program" lifetime program_identifier [ package_import_declaration ] ";" |
[ attribute_instance ] "program" lifetime program_identifier [ package_import_declaration ] list_of_port_declarations ";" |
[ attribute_instance ] "program" lifetime program_identifier [ package_import_declaration ] parameter_port_list ";" |
[ attribute_instance ] "program" lifetime program_identifier [ package_import_declaration ] parameter_port_list list_of_port_declarations ";";

rules checker_declaration ::= 
"checker" checker_identifier ";" { checker_or_generate_item } "endchecker" |
"checker" checker_identifier ";" { checker_or_generate_item } "endchecker" ":" checker_identifier |
"checker" checker_identifier "(" ")" ";" { checker_or_generate_item } "endchecker" |
"checker" checker_identifier "(" ")" ";" { checker_or_generate_item } "endchecker" ":" checker_identifier |
"checker" checker_identifier "(" checker_port_list ")" ";" { checker_or_generate_item } "endchecker" |
"checker" checker_identifier "(" checker_port_list ")" ";" { checker_or_generate_item } "endchecker" ":" checker_identifier;

rules class_declaration ::= 
"class" class_identifier ";" { class_item } "endclass" |
"class" class_identifier ";" { class_item } "endclass" ":" class_identifier |
"class" class_identifier "extends" class_type ";" { class_item } "endclass" |
"class" class_identifier "extends" class_type ";" { class_item } "endclass" ":" class_identifier |
"class" class_identifier ";" { class_item } "endclass" |
"class" class_identifier ";" { class_item } "endclass" ":" class_identifier |
"class" class_identifier "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass" |
"class" class_identifier "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass"  ":" class_identifier |
"class" class_identifier parameter_port_list ";" { class_item } "endclass" |
"class" class_identifier parameter_port_list ";" { class_item } "endclass"  ":" class_identifier |
"class" class_identifier parameter_port_list "extends" class_type ";" { class_item } "endclass" |
"class" class_identifier parameter_port_list "extends" class_type ";" { class_item } "endclass"  ":" class_identifier |
"class" class_identifier parameter_port_list ";" { class_item } "endclass" |
"class" class_identifier parameter_port_list ";" { class_item } "endclass"  ":" class_identifier |
"class" class_identifier parameter_port_list "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass" |
"class" class_identifier parameter_port_list "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass"  ":" class_identifier |
"class" lifetime class_identifier ";" { class_item } "endclass" |
"class" lifetime class_identifier ";" { class_item } "endclass"  ":" class_identifier |
"class" lifetime class_identifier "extends" class_type ";" { class_item } "endclass" |
"class" lifetime class_identifier "extends" class_type ";" { class_item } "endclass"  ":" class_identifier |
"class" lifetime class_identifier ";" { class_item } "endclass" |
"class" lifetime class_identifier ";" { class_item } "endclass"  ":" class_identifier |
"class" lifetime class_identifier "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass" |
"class" lifetime class_identifier "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass"  ":" class_identifier |
"class" lifetime class_identifier parameter_port_list ";" { class_item } "endclass" |
"class" lifetime class_identifier parameter_port_list ";" { class_item } "endclass"  ":" class_identifier |
"class" lifetime class_identifier parameter_port_list "extends" class_type ";" { class_item } "endclass" |
"class" lifetime class_identifier parameter_port_list "extends" class_type ";" { class_item } "endclass"  ":" class_identifier |
"class" lifetime class_identifier parameter_port_list ";" { class_item } "endclass" |
"class" lifetime class_identifier parameter_port_list ";" { class_item } "endclass"  ":" class_identifier |
"class" lifetime class_identifier parameter_port_list "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass" |
"class" lifetime class_identifier parameter_port_list "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" class_identifier ";" { class_item } "endclass" |
"virtual" "class" class_identifier ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" class_identifier "extends" class_type ";" { class_item } "endclass" |
"virtual" "class" class_identifier "extends" class_type ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" class_identifier ";" { class_item } "endclass" |
"virtual" "class" class_identifier ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" class_identifier "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass" |
"virtual" "class" class_identifier "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" class_identifier parameter_port_list ";" { class_item } "endclass" |
"virtual" "class" class_identifier parameter_port_list ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" class_identifier parameter_port_list "extends" class_type ";" { class_item } "endclass" |
"virtual" "class" class_identifier parameter_port_list "extends" class_type ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" lifetime class_identifier ";" { class_item } "endclass" |
"virtual" "class" lifetime class_identifier ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" lifetime class_identifier "extends" class_type ";" { class_item } "endclass" |
"virtual" "class" lifetime class_identifier "extends" class_type ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" class_identifier parameter_port_list ";" { class_item } "endclass" |
"virtual" "class" class_identifier parameter_port_list ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" class_identifier parameter_port_list "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass" |
"virtual" "class" class_identifier parameter_port_list "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" lifetime class_identifier ";" { class_item } "endclass" |
"virtual" "class" lifetime class_identifier ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" lifetime class_identifier "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass" |
"virtual" "class" lifetime class_identifier "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" lifetime class_identifier parameter_port_list ";" { class_item } "endclass" |
"virtual" "class" lifetime class_identifier parameter_port_list ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" lifetime class_identifier parameter_port_list "extends" class_type ";" { class_item } "endclass" |
"virtual" "class" lifetime class_identifier parameter_port_list "extends" class_type ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" lifetime class_identifier parameter_port_list ";" { class_item } "endclass" |
"virtual" "class" lifetime class_identifier parameter_port_list ";" { class_item } "endclass"  ":" class_identifier |
"virtual" "class" lifetime class_identifier parameter_port_list "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass" |
"virtual" "class" lifetime class_identifier parameter_port_list "extends" class_type "(" list_of_arguments ")" ";" { class_item } "endclass"  ":" class_identifier;

rules package_declaration ::= 
[ attribute_instance ] "package" package_identifier ";" [ package_with_attr ] "endpackage" |
[ attribute_instance ] "package" package_identifier ";" [ package_with_attr ] "endpackage" ":" package_identifier | 
[ attribute_instance ] "package" package_identifier ";" timeunits_declaration [ package_with_attr ] "endpackage" |
[ attribute_instance ] "package" package_identifier ";" timeunits_declaration [ package_with_attr ] "endpackage" ":" package_identifier |
[ attribute_instance ] "package" lifetime package_identifier ";" [ package_with_attr ] "endpackage" |
[ attribute_instance ] "package" lifetime package_identifier ";" [ package_with_attr ] "endpackage" ":" package_identifier | 
[ attribute_instance ] "package" lifetime package_identifier ";" timeunits_declaration [ package_with_attr ] "endpackage" |
[ attribute_instance ] "package" lifetime package_identifier ";" timeunits_declaration [ package_with_attr ] "endpackage" ":" package_identifier;

rules package_with_attr ::= [ attribute_instance ] package_item;

rules timeunits_declaration ::= 
"timeunit" time_literal ";" | 
"timeunit" time_literal "/" time_literal ";" | 
"timeprecision" time_literal ";" | 
"timeunit" time_literal ";" "timeprecision" time_literal ";" | 
"timeprecision" time_literal ";" "timeunit" time_literal ";";

-- A.1.3 Module parameters and port (Done)

rules parameter_port_list ::= 
"#" "(" list_of_param_assignments [ parameter_port_declaration_comma ] ")" | 
"#" "(" parameter_port_declaration [ parameter_port_declaration_comma ] ")" | 
"#""(" ")";

rules parameter_port_declaration_comma ::= "," parameter_port_declaration

rules parameter_port_declaration ::= 
parameter_declaration |
local_parameter_declaration |
data_type list_of_param_assignments |
"type" list_of_type_assignments;

rules list_of_ports ::= "(" [port] ")";

rules list_of_port_declarations ::= 
"("  ")" |
"(" [attribute_instance_with_ansi_port_declaration] ")";

rules attribute_instance_with_ansi_port_declaration ::= [ attribute_instance ] ansi_port_declaration;

rules port_declaration ::= 
[ attribute_instance ] inout_declaration |
[ attribute_instance ] input_declaration |
[ attribute_instance ] output_declaration |
[ attribute_instance ] ref_declaration |
[ attribute_instance ] interface_port_declaration;

rules port ::= | port_expression | "." port_identifier "(" ")" | "." port_identifier "(" port_expression ")";

rules port_expression ::= port_reference | "{" [port_reference] "}";

rules port_reference ::= port_identifier constant_select;

rules port_direction ::= "input" | "output" | "inout" | "ref";

rules net_port_header ::= net_port_type | port_direction net_port_type;

rules variable_port_header ::= variable_port_type | port_direction variable_port_type;

rules interface_port_header ::=
interface_identifier | interface_identifier "." modport_identifier | 
"interface" | "interface" "." modport_identifier;

rules ansi_port_declaration ::= 
port_identifier [ unpacked_dimension ] |
port_identifier [ unpacked_dimension ] "=" constant_expression |
net_port_header port_identifier [ unpacked_dimension ] |
net_port_header port_identifier [ unpacked_dimension ] "=" constant_expression |  
interface_port_header port_identifier [ unpacked_dimension ] |
interface_port_header port_identifier [ unpacked_dimension ] "=" constant_expression |  
port_identifier [ variable_dimension ] | 
port_identifier [ variable_dimension ] "=" constant_expression |
variable_port_header port_identifier [ variable_dimension ] | 
variable_port_header port_identifier [ variable_dimension ] "=" constant_expression | 
"." port_identifier "(" ")" |
"." port_identifier "(" expression ")" |
port_direction "." port_identifier "(" ")" |
port_direction "." port_identifier "(" expression ")";

-- A.1.4 Module Items (Done)

rules elaboration_system_task ::= 
"$fatal" ";" | 
"$fatal" "(" finish_number ")" ";" |  
"$fatal" "(" finish_number "," list_of_arguments ")" ";" | 
"$error" ";" | 
"$error" "(" ")" ";" | 
"$error" "(" list_of_arguments ")" ";" | 
"$warning" ";" | 
"$warning" "(" ")" ";" | 
"$warning" "(" list_of_arguments ")" ";" | 
"$info" ";" |
"$info" "(" ")" ";" |
"$info" "(" list_of_arguments ")" ";";

rules finish_number ::= "0" | "1" | "2";

rules module_common_item ::= module_or_generate_item_declaration 
| interface_instantiation 
| program_instantiation 
| assertion_item 
| bind_directive 
| continuous_assign 
| net_alias 
| initial_construct 
| final_construct 
| always_construct 
| loop_generate_construct 
| conditional_generate_construct 
| elaboration_system_task;

rules module_item ::= port_declaration ";"
| non_port_module_item;

rules module_or_generate_item ::= [ attribute_instance ] parameter_override 
| [ attribute_instance ] gate_instantiation 
| [ attribute_instance ] udp_instantiation 
| [ attribute_instance ] module_instantiation 
| [ attribute_instance ] module_common_item;

rules module_or_generate_item_declaration ::= package_or_generate_item_declaration 
| genvar_declaration 
| clocking_declaration 
| "default" "clocking" clocking_identifier ";"
| "default" "disable" "iff" expression_or_dist ";";

rules non_port_module_item ::= generate_region 
| module_or_generate_item 
| specify_block 
| [ attribute_instance ] specparam_declaration 
| program_declaration 
| module_declaration 
| interface_declaration 
| timeunits_declaration

rules parameter_override ::= "defparam" list_of_defparam_assignments ";";

rules bind_directive ::= 
"bind" bind_target_scope bind_instantiation ";" |
"bind" bind_target_scope ":" bind_target_instance_list bind_instantiation ";" |
"bind" bind_target_instance bind_instantiation ";";

rules bind_target_scope ::= module_identifier | interface_identifier;
rules bind_target_instance ::= hierarchical_identifier constant_bit_select ;
rules bind_target_instance_list ::= [bind_target_instance];
rules bind_instantiation ::= program_instantiation | module_instantiation | interface_instantiation | checker_instantiation;

-- A.1.5 Configuration source text (Done)

rules config_declaration ::= 
"config" config_identifier ";" [ local_parameter_declaration ] design_statement [ config_rule_statement ] "endconfig" |
"config" config_identifier ";" [ local_parameter_declaration ] design_statement [ config_rule_statement ] "endconfig" ":" config_identifier;

rules design_statement ::= "design" [lib_cell_combined_identifier] ";";

rules lib_cell_combined_identifier ::= cell_identifier | library_identifier "." cell_identifier;

rules config_rule_statement ::= 
default_clause liblist_clause ";"
| inst_clause liblist_clause ";"
| inst_clause use_clause ";"
| cell_clause liblist_clause ";"
| cell_clause use_clause ";";

rules default_clause ::= "default";
rules inst_clause ::= "instance" inst_name; 
rules inst_name ::= topmodule_identifier [instance_identifier_with_dot]; 
rules instance_identifier_with_dot ::= "." instance_identifier;

rules cell_clause ::= 
"cell" cell_identifier |
"cell" library_identifier "." cell_identifier;

rules liblist_clause ::= liblist [library_identifier];

rules use_clause ::= 
"use" cell_identifier | 
"use" cell_identifier ":" "config" | 
"use" library_identifier "." cell_identifier | 
"use" library_identifier "." cell_identifier ":" "config" | 
"use" [named_parameter_assignment] | 
"use" [named_parameter_assignment] ":" "config" | 
"use" cell_identifier [ named_parameter_assignment ] | 
"use" cell_identifier [ named_parameter_assignment ] ":" "config" |
"use" library_identifier "." cell_identifier [ named_parameter_assignment ] | 
"use" library_identifier "." cell_identifier [ named_parameter_assignment ] ":" "config";

-- A.1.6 Interface items (Done)
rules interface_or_generate_item ::= 
[ attribute_instance ] module_common_item 
| [ attribute_instance ] modport_declaration 
| [ attribute_instance ] extern_tf_declaration

rules extern_tf_declaration ::= "extern" method_prototype ";" | "extern" "forkjoin" task_prototype ";"

rules interface_item ::= port_declaration ";" | non_port_interface_item;

rules non_port_interface_item ::= generate_region 
| interface_or_generate_item 
| program_declaration 
| interface_declaration 
| timeunits_declaration

-- A.1.7 Program items (Done)
rules program_item ::= port_declaration ";" | non_port_program_item;


rules non_port_program_item ::= [ attribute_instance ] continuous_assign 
| [ attribute_instance ] module_or_generate_item_declaration 
| [ attribute_instance ] initial_construct 
| [ attribute_instance ] final_construct 
| [ attribute_instance ] concurrent_assertion_item 
| [ attribute_instance ] timeunits_declaration
| program_generate_item ;

rules program_generate_item ::= loop_generate_construct 
| conditional_generate_construct 
| generate_region 
| elaboration_system_task;

-- A.1.8 Checker items (Done)

rules checker_port_list ::= [checker_port_item];
rules checker_port_item ::= 
[ attribute_instance ] property_formal_type port_identifier [variable_dimension] |
[ attribute_instance ] property_formal_type port_identifier [variable_dimension] "=" property_actual_arg ; 

rules checker_or_generate_item ::= checker_or_generate_item_declaration 
| initial_construct
| checker_always_construct
| final_construct
| assertion_item
| checker_generate_item;

rules checker_or_generate_item_declaration ::= 
data_declaration |
"rand" data_declaration |
function_declaration |
assertion_item_declaration |
covergroup_declaration  |
overload_declaration |
genvar_declaration |
clocking_declaration |
"default" "clocking" clocking_identifier ";" |
"default" "disable" "iff" expression_or_dist ";" |
";";

rules checker_generate_item ::= loop_generate_construct
| conditional_generate_construct
| generate_region
| elaboration_system_task;

rules checker_always_construct ::= "always" statement;

-- A.1.9 Class items (Done)
rules class_item ::= 
[ attribute_instance ] class_property 
| [ attribute_instance ] class_method 
| [ attribute_instance ] class_constraint 
| [ attribute_instance ] class_declaration 
| [ attribute_instance ] covergroup_declaration 
| local_parameter_declaration ";"
| parameter_declaration ";"
| ";";

rules class_property ::= [property_qualifier] data_declaration 
| "const" [ class_item_qualifier ] data_type const_identifier ";"
| "const" [ class_item_qualifier ] data_type const_identifier "=" constant_expression ";";

rules class_method ::= 
[ method_qualifier ] task_declaration 
| [ method_qualifier ] function_declaration 
| "extern" [ method_qualifier ] method_prototype ";"
| [ method_qualifier ] class_constructor_declaration 
| "extern" [ method_qualifier ] class_constructor_prototype;

rules class_constructor_prototype ::=  "function" "new" "(" ")" ";" | "function" "new" "(" tf_port_list ")" ";";

rules class_constraint ::= constraint_prototype | constraint_declaration;

rules class_item_qualifier ::= "static" | "protected" | "local";

rules property_qualifier ::= random_qualifier | class_item_qualifier;

rules random_qualifier ::= "rand" | "randc";

rules method_qualifier8 ::= "virtual" | "pure" "virtual" | class_item_qualifier;

rules method_prototype ::= task_prototype | function_prototype;

rules class_constructor_declaration ::= 
"function" "new" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" |
"function" "new" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" "new" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction"  |
"function" "new" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction"  |
"function" "new" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" "new" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" "new" "(" ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" |
"function" "new" "(" tf_port_list ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" |
"function" "new" "(" ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" "new" "(" tf_port_list ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" "new" "(" ")" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction"  |
"function" "new" "(" ")" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction"  |
"function" "new" "(" tf_port_list ")" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction"  |
"function" "new" "(" tf_port_list ")" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction"  |
"function" "new" "(" ")" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" "new" "(" ")" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" "new" "(" tf_port_list ")" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" "new" "(" tf_port_list ")" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" class_scope "new" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" |
"function" class_scope "new" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" "new" |
"function" class_scope "new" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction"  |
"function" class_scope "new" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction"  |
"function" class_scope "new" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" class_scope "new" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" class_scope "new" "(" ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" |
"function" class_scope "new" "(" tf_port_list ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" |
"function" class_scope "new" "(" ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" class_scope "new" "(" tf_port_list ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" "new" |
"function" class_scope "new" "(" ")" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction"  |
"function" class_scope "new" "(" ")" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction"  |
"function" class_scope "new" "(" tf_port_list ")" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction"  |
"function" class_scope "new" "(" tf_port_list ")" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction"  |
"function" class_scope "new" "(" ")" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" class_scope "new" "(" ")" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" class_scope "new" "(" tf_port_list ")" ";" [ block_item_declaration ] "super" "." "new" ";"  [ function_statement_or_null ] "endfunction" ":" "new"  |
"function" class_scope "new" "(" tf_port_list ")" ";" [ block_item_declaration ] "super" "." "new" "(" list_of_arguments ")" ";"  [ function_statement_or_null ] "endfunction" ":" "new";

-- A.1.10 Constraints (Done)

rules constraint_declaration ::= 
"constraint" constraint_identifier constraint_block |
"static" "constraint" constraint_identifier constraint_block;

rules constraint_block ::= "{" [constraint_block_item] "}";

rules constraint_block_item ::= "solve" solve_before_list "before" solve_before_list ";" | constraint_expression;

rules solve_before_list ::= [solve_before_primary];

rules solve_before_primary ::= 
hierarchical_identifier select | 
implicit_class_handle "." hierarchical_identifier select | 
class_scope hierarchical_identifier select;

rules constraint_expression ::= expression_or_dist ";" 
| expression "–>" constraint_set 
| "if" "(" expression ")" constraint_set
| "if" "(" expression ")" constraint_set "else" constraint_set 
| "foreach" "(" ps_or_hierarchical_array_identifier ")" constraint_set
| "foreach" "(" ps_or_hierarchical_array_identifier loop_variables ")" constraint_set;

rules constraint_set ::= constraint_expression | "{" [constraint_expression] "}";

rules dist_list ::= [dist_item]; 
rules dist_item ::= value_range | value_range dist_weight;
rules dist_weight ::= ":=" expression | ":/" expression;

rules constraint_prototype ::= 
"constraint" constraint_identifier ";" |
"static" "constraint" constraint_identifier ";" |
constraint_prototype_qualifier "constraint" constraint_identifier ";" |
constraint_prototype_qualifier "static" "constraint" constraint_identifier ";" ;

rules constraint_prototype_qualifier ::= "extern" | "pure";

rules extern_constraint_declaration ::= 
"constraint" class_scope constraint_identifier constraint_block
"static" "constraint" class_scope constraint_identifier constraint_block

rules identifier_list ::= [identifier];

-- A.1.11 Package Item (Done)
rules package_item ::= package_or_generate_item_declaration | anonymous_program | package_export_declaration | timeunits_declaration;

rules package_or_generate_item_declaration ::= net_declaration 
| data_declaration 
| task_declaration 
| function_declaration 
| checker_declaration 
| dpi_import_export 
| extern_constraint_declaration 
| class_declaration 
| class_constructor_declaration 
| local_parameter_declaration ";"
| parameter_declaration ";"
| covergroup_declaration 
| overload_declaration 
| assertion_item_declaration 
| ";";

rules anonymous_program ::= "program" ";" [anonymous_program_item] "endprogram";

rules anonymous_program_item ::= task_declaration 
| function_declaration 
| class_declaration 
| covergroup_declaration 
| class_constructor_declaration 
| ";";

-- A.2 Declarations
-- A.2.1. Declaration types (Done)
-- A.2.1.1 Module parameter declarations (Done)

rules local_parameter_declaration ::= "localparam" data_type_or_implicit list_of_param_assignments | "localparam" "type" list_of_type_assignments;
rules parameter_declaration ::= "parameter" data_type_or_implicit list_of_param_assignments | "parameter" "type" list_of_type_assignments;
rules specparam_declaration ::= 
"specparam" list_of_specparam_assignments ";" |
"specparam" packed_dimension list_of_specparam_assignments ";";

-- A.2.1.2 Port declarations (Done)
rules inout_declaration ::= "inout" net_port_type list_of_port_identifiers;
rules input_declaration ::= "input" net_port_type list_of_port_identifiers | "input" variable_port_type list_of_variable_identifiers;
rules output_declaration ::= "output" net_port_type list_of_port_identifiers | "output" variable_port_type list_of_variable_port_identifiers;
rules interface_port_declaration ::= interface_identifier list_of_interface_identifiers | interface_identifier "." modport_identifier list_of_interface_identifiers; 
rules ref_declaration ::= "ref" variable_port_type list_of_port_identifiers;

-- A.2.1.3 Type declarations (Done)

rules data_declaration ::= 
data_type_or_implicit list_of_variable_decl_assignments ";" |
lifetime data_type_or_implicit list_of_variable_decl_assignments ";" |
"var" data_type_or_implicit list_of_variable_decl_assignments ";" |
"var" lifetime data_type_or_implicit list_of_variable_decl_assignments ";" |
"const" data_type_or_implicit list_of_variable_decl_assignments ";" |
"const" lifetime data_type_or_implicit list_of_variable_decl_assignments ";" |
"const" "var" data_type_or_implicit list_of_variable_decl_assignments ";" |
"const" "var" lifetime data_type_or_implicit list_of_variable_decl_assignments ";" |
type_declaration | 
package_import_declaration |
virtual_interface_declaration; 

rules package_import_declaration ::= "import" [package_import_item] ";";
rules package_import_item ::= package_identifier "::" identifier | package_identifier "::" "*";
rules package_export_declaration ::= "export" "*" "::" "*" ";" | "export" [package_import_item] ";";
rules genvar_declaration ::= "genvar" list_of_genvar_identifiers ";"

rules net_declaration ::= 
net_type data_type_or_implicit list_of_net_decl_assignments ";" |
net_type data_type_or_implicit delay3 list_of_net_decl_assignments ";" |
net_type "vectored" data_type_or_implicit list_of_net_decl_assignments ";" |
net_type "vectored" data_type_or_implicit delay3 list_of_net_decl_assignments ";" |
net_type "scalared" data_type_or_implicit list_of_net_decl_assignments ";" |
net_type "scalared" data_type_or_implicit delay3 list_of_net_decl_assignments ";" |
net_type drive_strength data_type_or_implicit list_of_net_decl_assignments ";" |
net_type drive_strength data_type_or_implicit delay3 list_of_net_decl_assignments ";" |
net_type drive_strength "vectored" data_type_or_implicit list_of_net_decl_assignments ";" |
net_type drive_strength "vectored" data_type_or_implicit delay3 list_of_net_decl_assignments ";" |
net_type drive_strength "scalared" data_type_or_implicit list_of_net_decl_assignments ";" |
net_type drive_strength "scalared" data_type_or_implicit delay3 list_of_net_decl_assignments ";" |
net_type charge_strength data_type_or_implicit list_of_net_decl_assignments ";" |
net_type charge_strength data_type_or_implicit delay3 list_of_net_decl_assignments ";" |
net_type charge_strength "vectored" data_type_or_implicit list_of_net_decl_assignments ";" |
net_type charge_strength "vectored" data_type_or_implicit delay3 list_of_net_decl_assignments ";" |
net_type charge_strength "scalared" data_type_or_implicit list_of_net_decl_assignments ";" |
net_type charge_strength "scalared" data_type_or_implicit delay3 list_of_net_decl_assignments ";";

rules type_declaration ::= 
"typedef" data_type type_identifier [variable_dimension] ";"
| "typedef" interface_instance_identifier constant_bit_select "." type_identifier type_identifier ";"
| "typedef" type_identifier ";"
| "typedef" "enum" type_identifier ";"
| "typedef" "struct" type_identifier ";"
| "typedef" "union" type_identifier ";"
| "typedef" "class" type_identifier ";";

rules lifetime ::= "static" | "automatic";

-- A.2.2 Declaration data types (Done)
-- A.2.2.1 Net and variable types (Done)

rules casting_type ::= simple_type | constant_primary | signing | "string" | "const";

rules data_type ::= 
integer_vector_type [ packed_dimension ] |
integer_vector_type signing [ packed_dimension ] |
integer_atom_type |
integer_atom_type signing |
non_integer_type | 
struct_union "{" [ struct_union_member ] "}" [ packed_dimension ]| 
struct_union "packed" "{" [ struct_union_member ] "}" [ packed_dimension ]| 
struct_union "packed" signing "{" [ struct_union_member ] "}" [ packed_dimension ]| 
"enum" "{" [enum_name_declaration] "}" [ packed_dimension ] | 
"enum" enum_base_type "{" [enum_name_declaration] "}" [ packed_dimension ] | 
"string"| 
"chandle"| 
"virtual" interface_identifier | 
"virtual" "interface" interface_identifier | 
type_identifier [ packed_dimension ] | 
class_scope type_identifier [ packed_dimension ] | 
package_scope type_identifier [ packed_dimension ] | 
class_type | 
"event"| 
ps_covergroup_identifier | 
type_reference;

rules data_type_or_implicit ::= data_type | implicit_data_type;

rules implicit_data_type ::= 
[ packed_dimension ] |
signing [ packed_dimension ]; 

rules enum_base_type ::= 
integer_atom_type 
| integer_atom_type signing 
| integer_vector_type 
| integer_vector_type packed_dimension 
| integer_vector_type signing  
| integer_vector_type signing packed_dimension 
| type_identifier
| type_identifier [ packed_dimension ]

rules enum_name_declaration ::= 
enum_identifier |
enum_identifier "=" constant_expression |
enum_identifier "[" integral_number "]" |
enum_identifier "[" integral_number "]" "=" constant_expression|
enum_identifier "[" integral_number ":" integral_number "]"  |
enum_identifier "[" integral_number ":" integral_number "]" "=" constant_expression;

rules class_scope ::= class_type "::";

rules class_type ::= 
ps_class_identifier |
ps_class_identifier parameter_value_assignment |
[ scoped_class_identified_maybe_param_value_assignment ];

rules scoped_class_identified_maybe_param_value_assignment ::= "::" class_identifier | "::" class_identifier parameter_value_assignment;

rules integer_type ::= integer_vector_type | integer_atom_type;

rules integer_atom_type ::= "byte" | "shortint" | "int" | "longint" | "integer" | "time";
rules integer_vector_type ::= "bit" | "logic" | "reg";
rules non_integer_type ::= "shortreal" | "real" | "realtime";
rules net_type ::= "supply0" | "supply1" | "tri" | "triand" | "trior" | "trireg"| "tri0" | "tri1" | "uwire"| "wire" | "wand" | "wor";

rules net_port_type ::= data_type_or_implicit | net_type data_type_or_implicit; 
rules variable_port_type ::= var_data_type;
rules var_data_type ::= data_type | "var" data_type_or_implicit;

rules signing ::= "signed" | "unsigned";
rules simple_type ::= integer_type | non_integer_type | ps_type_identifier | ps_parameter_identifier;

rules struct_union_member ::= 
[ attribute_instance ] data_type_or_void list_of_variable_decl_assignments ";" |
[ attribute_instance ] random_qualifier data_type_or_void list_of_variable_decl_assignments ";";

rules data_type_or_void ::= data_type | "void";
rules struct_union ::= "struct" | "union" | "union" "tagged"; 
rules type_reference ::= "type" "(" expression ")" | "type" "(" data_type ")";

-- A.2.2.2 Strengths (Done)
rules drive_strength ::= 
"(" strength0 "," strength1 ")"
| "(" strength1 "," strength0 ")"
| "(" strength0 "," "highz1" ")"
| "(" strength1 "," "highz0" ")"
| "(" "highz0" "," strength1 ")"
| "(" "highz1" "," strength0 ")";

rules strength0 ::= "supply0" | "strong0" | "pull0" | "weak0";
rules strength1 ::= "supply1" | "strong1" | "pull1" | "weak1";
rules charge_strength ::= "(" "small" ")" | "(" "medium" ")" | "(" "large" ")";

-- A.2.2.3 Delays (Done)
rules delay3 ::= 
"#" delay_value | 
"#" "(" mintypmax_expression ")" |
"#" "(" mintypmax_expression "," mintypmax_expression ")" |
"#" "(" mintypmax_expression "," mintypmax_expression "," mintypmax_expression ")" ;

rules delay2 ::= 
"#" delay_value |
 "#" "(" mintypmax_expression ")" |
 "#" "(" mintypmax_expression "," mintypmax_expression ")";

rules delay_value ::= 
unsigned_number 
| real_number 
| ps_identifier 
| time_literal 
| "1step";

-- A.2.3 Declaration lists (Done)

rules list_of_defparam_assignments ::= [defparam_assignment];
rules list_of_genvar_identifiers ::= [genvar_identifier];
rules list_of_interface_identifiers ::= [interface_identifier_with_upacked_dimension];
rules list_of_net_decl_assignments ::= [net_decl_assignment];
rules list_of_param_assignments ::= [param_assignment]; 
rules list_of_port_identifiers ::= [port_identifier_with_unpacked_dimension];
rules list_of_udp_port_identifiers ::= [port_identifier]; 
rules list_of_specparam_assignments ::= [specparam_assignment];
rules list_of_tf_variable_identifiers ::= [tf_variable_identifier];
rules list_of_type_assignments ::= [type_assignment]; 
rules list_of_variable_decl_assignments ::= [variable_decl_assignment];
rules list_of_variable_identifiers ::= [variable_identifier_with_variable_dimension];
rules list_of_variable_port_identifiers ::= [variable_port_identifier_with_variable_dimension];
rules list_of_virtual_interface_decl ::= [variable_identifier_with_instance_identifier];

rules interface_identifier_with_upacked_dimension ::= interface_identifier [ unpacked_dimension ];
rules port_identifier_with_unpacked_dimension ::= port_identifier [ unpacked_dimension ];
rules tf_variable_identifier ::= port_identifier [ variable_dimension ] | port_identifier [ variable_dimension ] "=" expression;
rules variable_identifier_with_variable_dimension ::=  variable_identifier [ variable_dimension ];
rules variable_port_identifier_with_variable_dimension ::= port_identifier [ variable_dimension ] | port_identifier [ variable_dimension ] "=" constant_expression
rules variable_identifier_with_instance_identifier ::=  variable_identifier |  variable_identifier "=" interface_instance_identifier ;

separator nonempty genvar_identifier ",";
separator nonempty interface_identifier_with_upacked_dimension ",";
separator nonempty net_decl_assignment ",";
separator nonempty param_assignment ",";
separator nonempty port_identifier_with_unpacked_dimension ",";
separator nonempty port_identifier ",";
separator nonempty specparam_assignment ",";
separator nonempty tf_variable_identifier ",";
separator nonempty type_assignment "," ;
separator nonempty variable_decl_assignment ",";
separator nonempty variable_identified_with_variable_dimension ",";
separator nonempty variable_port_identifier_with_variable_dimension ",";
separator nonempty variable_identifier_with_instance_identifier ",";

-- A.2.4 Declaration assignments (Done)
rules defparam_assignment ::= hierarchical_parameter_identifier "=" constant_mintypmax_expression ;
rules net_decl_assignment ::= net_identifier [ unpacked_dimension ] | net_identifier [ unpacked_dimension ] "=" expression ;
rules param_assignment ::= 
parameter_identifier [ unpacked_dimension ] 
| parameter_identifier [ unpacked_dimension ] "=" constant_param_expression;

rules specparam_assignment ::= specparam_identifier "=" constant_mintypmax_expression | pulse_control_specparam ;
rules type_assignment ::= type_identifier | type_identifier "=" data_type;

pulse_control_specparam ::= 
"PATHPULSE$" "=" "(" reject_limit_value ")"
| "PATHPULSE$" "=" "(" reject_limit_value "," error_limit_value ")"
| "PATHPULSE$"specify_input_terminal_descriptor"$"specify_output_terminal_descriptor "=" "(" reject_limit_value ")"
| "PATHPULSE$"specify_input_terminal_descriptor"$"specify_output_terminal_descriptor "=" "(" reject_limit_value "," error_limit_value ")";

rules error_limit_value ::= limit_value ;
rules reject_limit_value ::= limit_value ;
rules limit_value ::= constant_mintypmax_expression ; 
rules variable_decl_assignment ::= 
variable_identifier [ variable_dimension ] maybe_assign_expression 
| dynamic_array_variable_identifier unsized_dimension [ variable_dimension ] maybe_assign_dynamic_array_new 
| class_variable_identifier maybe_assign_class_new;

rules class_new ::= "new" | "new" expression | "new" "(" list_of_arguments ")"; 
rules dynamic_array_new ::= "new" "[" expression "]" maybe_enclosed_expression; 

rules maybe_assign_expression ::= | "=" expression;
rules maybe_assign_dynamic_array_new ::= | "=" dynamic_array_new ;
rules maybe_assign_class_new ::= | "=" class_new;
rules maybe_enclosed_expression ::= |  "(" expression ")";

-- A.2.5 Declaration ranges (Done) 
rules unpacked_dimension ::= "[" constant_range "]" | "[" constant_expression "]";
rules packed_dimension ::= "[" constant_range "]" | unsized_dimension ;
rules associative_dimension ::= "[" data_type "]" | "[" "*" "]";
rules variable_dimension ::= 
unsized_dimension 
| unpacked_dimension 
| associative_dimension 
| queue_dimension ;

rules queue_dimension ::= "[" "$"  "]" | "[" "$" ":" constant_expression "]";
rules unsized_dimension ::= "[" "]";

separator unpacked_dimension "";

-- A.2.6 Function declarations (Done)
rules function_data_type_or_implicit ::= data_type_or_void | implicit_data_type ;
rules function_declaration ::= "function" function_body_declaration | "function" lifetime function_body_declaration;

rules function_body_declaration ::= 
function_data_type_or_implicit function_identifier ";" [ tf_item_declaration ] [ function_statement_or_null ] "endfunction" 
| function_data_type_or_implicit function_identifier ";" [ tf_item_declaration ] [ function_statement_or_null ] "endfunction" ":" function_identifier
| function_data_type_or_implicit interface_identifier "." function_identifier ";" [ tf_item_declaration ] [ function_statement_or_null ] "endfunction"
| function_data_type_or_implicit interface_identifier "." function_identifier ";" [ tf_item_declaration ] [ function_statement_or_null ] "endfunction" ":" function_identifier
| function_data_type_or_implicit class_scope function_identifier ";" [ tf_item_declaration ] [ function_statement_or_null ] "endfunction"
| function_data_type_or_implicit class_scope function_identifier ";" [ tf_item_declaration ] [ function_statement_or_null ] "endfunction" ":" function_identifier

| function_data_type_or_implicit function_identifier "("  ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" 
| function_data_type_or_implicit function_identifier "("  ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" function_identifier

| function_data_type_or_implicit function_identifier "(" tf_port_list ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" 
| function_data_type_or_implicit function_identifier "(" tf_port_list ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" function_identifier

| function_data_type_or_implicit interface_identifier "." function_identifier "(" ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" 
| function_data_type_or_implicit interface_identifier "." function_identifier "(" ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" function_identifier

| function_data_type_or_implicit interface_identifier "." function_identifier "(" tf_port_list ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" 
| function_data_type_or_implicit interface_identifier "." function_identifier "(" tf_port_list ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" function_identifier

| function_data_type_or_implicit class_scope function_identifier "(" ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" 
| function_data_type_or_implicit class_scope function_identifier "(" ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" function_identifier

| function_data_type_or_implicit class_scope function_identifier "(" tf_port_list ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" 
| function_data_type_or_implicit class_scope function_identifier "(" tf_port_list ")" ";" [ block_item_declaration ] [ function_statement_or_null ] "endfunction" ":" function_identifier;

rules function_prototype ::= 
function data_type_or_void function_identifier "(" ")" 
| function data_type_or_void function_identifier "(" tf_port_list ")";

rules dpi_import_export ::= 
"import" dpi_spec_string dpi_function_proto ";"
| "import" dpi_spec_string c_identifier "=" dpi_function_proto ";"
| "import" dpi_spec_string dpi_function_import_property dpi_function_proto ";"
| "import" dpi_spec_string dpi_function_import_property c_identifier "=" dpi_function_proto ";"
| "import" dpi_spec_string dpi_task_proto ";"
| "import" dpi_spec_string c_identifier "=" dpi_task_proto ";"
| "import" dpi_spec_string dpi_task_import_property dpi_task_proto ";"
| "import" dpi_spec_string dpi_task_import_property c_identifier "=" dpi_task_proto ";"
| "export" dpi_spec_string "function" function_identifier ";"
| "export" dpi_spec_string c_identifier "=" "function" function_identifier ";"
| "export" dpi_spec_string "task" task_identifier ";"
| "export" dpi_spec_string c_identifier "=" "task" task_identifier ";";

rules dpi_spec_string ::= "\"DPI-C\"" | "\"DPI\"";
rules dpi_function_import_property ::= "context" | "pure";
rules dpi_task_import_property ::= "context";
rules dpi_function_proto ::= function_prototype ;
rules dpi_task_proto ::= task_prototype;

separator function_statement_or_null "";
separator block_item_declaration "";

-- A.2.7 Task declarations (Done)
rules task_declaration ::= "task" task_body_declaration | task lifetime task_body_declaration; 
rules task_body_declaration ::= 
| task_identifier ";" [ tf_item_declaration ] [ statement_or_null ] "endtask" maybe_task_identifier_footer 
| interface_identifier "." task_identifier ";" [ tf_item_declaration ] [ statement_or_null ] "endtask" maybe_task_identifier_footer 
| class_scope task_identifier ";" [ tf_item_declaration ] [ statement_or_null ] "endtask" maybe_task_identifier_footer;

| task_identifier "(" maybe_tf_port_list ")" ";" [ block_item_declaration ] [ statement_or_null ] "endtask" maybe_task_identifier_footer
| interface_identifier "." task_identifier "(" maybe_tf_port_list ")" ";" [ block_item_declaration ] [ statement_or_null ] "endtask" maybe_task_identifier_footer
| class_scope task_identifier "(" maybe_tf_port_list ")" ";" [ block_item_declaration ] [ statement_or_null ] "endtask" maybe_task_identifier_footer;

rules tf_item_declaration ::= 
block_item_declaration 
| tf_port_declaration ;

rules tf_port_list ::= [tf_port_item];
rules tf_port_item ::= [ attribute_instance ] maybe_tf_port_direction maybe_var data_type_or_implicit maybe_port_expression;

rules tf_port_direction ::= port_direction | "const" "ref";
rules tf_port_declaration ::= [ attribute_instance ] tf_port_direction maybe_var data_type_or_implicit list_of_tf_variable_identifiers ";";
rules task_prototype ::= "task" task_identifier "(" maybe_tf_port_list ")";

rules maybe_task_identifier_footer ::= | ":" task_identifier;
rules maybe_tf_port_list ::= | tf_port_list;
rules maybe_tf_port_direction ::= | tf_port_direction;
rules maybe_var ::= | "var";
rules maybe_port_expression ::= |  port_identifier [ variable_dimension ] maybe_expression;

separator nonempty tf_port_item ",";
separator tf_item_declaration "";

-- A.2.8 Block item declarations (Done) 
rules block_item_declaration ::= 
[ attribute_instance ] data_declaration 
| [ attribute_instance ] local_parameter_declaration ";"
| [ attribute_instance ] parameter_declaration ";"
| [ attribute_instance ] overload_declaration 
| [ attribute_instance ] let_declaration ;
rules overload_declaration ::= "bind" overload_operator "function" data_type function_identifier "(" overload_proto_formals ")" ";";
rules overload_operator ::= "+" | "++" | "–" | "– –" | "*" | "**" | "/" | "%" | "==" | "!=" | "<" | "<=" | ">" | ">=" | "=";
rules overload_proto_formals ::= [data_type];

separator nonempty data_type ",";

-- A.2.9 Interface declarations (Done)
rules virtual_interface_declaration ::= 
"virtual" interface_identifier maybe_parameter_value_assignment maybe_modport_identifier list_of_virtual_interface_decl ";"
| "virtual" "interface" interface_identifier maybe_parameter_value_assignment maybe_modport_identifier list_of_virtual_interface_decl ";";

rules modport_declaration ::= "modport" [modport_item] ";";

rules modport_item ::= modport_identifier "(" [modport_ports_declaration]")"
rules modport_ports_declaration ::=
[ attribute_instance ] modport_simple_ports_declaration 
| [ attribute_instance ] modport_tf_ports_declaration 
| [ attribute_instance ] modport_clocking_declaration;

rules modport_clocking_declaration ::= "clocking" clocking_identifier ;
rules modport_simple_ports_declaration ::= port_direction [modport_simple_port];

rules modport_simple_port ::= port_identifier | "." port_identifier "(" maybe_expression ")";
rules modport_tf_ports_declaration ::= import_export [modport_tf_port];

rules modport_tf_port ::= method_prototype | tf_identifier ;
rules import_export ::= "import" | "export";

rules maybe_modport_identifier ::= | "." modport_identifier;
separator nonempty modport_item ",";
separator nonempty modport_ports_declaration ",";
separator nonempty modport_simple_port ",";
separator nonempty modport_tf_port ",";

-- A.2.10 Assertion declarations 
-- A.2.11 Covergroup declarations 

-- A.3 Primitive instances 
-- A.3.1 Primitive instantiation and instances (Done)

rules gate_instantiation ::= 
cmos_switchtype [cmos_switch_instance] ";"
| cmos_switchtype delay3 [cmos_switch_instance] ";"
| enable_gatetype [enable_gate_instance] ";"
| enable_gatetype delay3 [enable_gate_instance] ";"
| enable_gatetype drive_strength [enable_gate_instance] ";"
| enable_gatetype drive_strength delay3 [enable_gate_instance] ";"
| mos_switchtype [mos_switch_instance] ";"
| mos_switchtype delay3 [mos_switch_instance] ";"
| n_input_gatetype [n_input_gate_instance] ";"
| n_input_gatetype delay2 [n_input_gate_instance] ";"
| n_input_gatetype drive_strength [n_input_gate_instance] ";"
| n_input_gatetype drive_strength delay2 [n_input_gate_instance] ";"
| n_output_gatetype [n_output_gate_instance] ";"
| n_output_gatetype delay2 [n_output_gate_instance] ";"
| n_output_gatetype drive_strength [n_output_gate_instance] ";"
| n_output_gatetype drive_strength delay2 [n_output_gate_instance] ";"
| pass_en_switchtype [pass_enable_switch_instance] ";"
| pass_en_switchtype delay2 [pass_enable_switch_instance] ";"
| pass_switchtype [pass_switch_instance] ";"
| "pulldown" [pull_gate_instance] ";"
| "pulldown" pulldown_strength [pull_gate_instance] ";"
| "pullup" [pull_gate_instance] ";"
| "pullup" pullup_strength [pull_gate_instance] ";";

rules cmos_switch_instance ::= maybe_name_of_instance "(" output_terminal "," input_terminal "," ncontrol_terminal "," pcontrol_terminal ")"
rules enable_gate_instance ::= maybe_name_of_instance "(" output_terminal "," input_terminal "," enable_terminal ")"
rules mos_switch_instance ::= maybe_name_of_instance "(" output_terminal "," input_terminal "," enable_terminal ")"
rules n_input_gate_instance ::= maybe_name_of_instance "(" output_terminal "," [input_terminal] ")"
rules n_output_gate_instance ::= maybe_name_of_instance "(" [output_terminal] "," input_terminal ")"
rules pass_switch_instance ::= maybe_name_of_instance "(" inout_terminal "," inout_terminal ")"
rules pass_enable_switch_instance ::= maybe_name_of_instance "(" inout_terminal "," inout_terminal "," enable_terminal ")"
rules pull_gate_instance ::= maybe_name_of_instance "(" output_terminal ")"

rules maybe_name_of_instance ::= | name_of_instance;

separator nonempty cmos_switch_instance ",";
separator nonempty mos_switch_instance ",";
separator nonempty enable_gate_instance ",";
separator nonempty n_input_gate_instance ",";
separator nonempty n_output_gate_instance ",";
separator nonempty pass_enable_switch_instance ",";
separator nonempty pass_switch_instance ",";
separator nonempty pull_gate_instance ",";

-- A.3.2 Primitive strengths (Done)
rules pulldown_strength ::= 
"(" strength0 "," strength1 ")"
| "(" strength1 "," strength0 ")"
| "(" strength0 ")";

rules pullup_strength ::= 
"(" strength0 "," strength1 ")"
| "(" strength1 "," strength0 ")"
| "(" strength1 ")";

-- A.3.3 Primitive terminals (Done) 
rules enable_terminal ::= expression;
rules inout_terminal ::= net_lvalue;
rules input_terminal ::= expression;
rules ncontrol_terminal ::= expression;
rules output_terminal ::= net_lvalue;
rules pcontrol_terminal ::= expression;

-- A.3.4 Primitive gate and switch types (Done)
rules cmos_switchtype ::= "cmos" | "rcmos";
rules enable_gatetype ::= "bufif0" | "bufif1" | "notif0" | "notif1";
rules n_input_gatetype ::= "and" | "nand" | "or" | "nor" | "xor" | "xnor";
rules mos_switchtype ::= "nmos" | "pmos" | "rnmos" | "rpmos";
rules n_output_gatetype ::= "buf" | "not";
rules pass_en_switchtype ::= "tranif0" | "tranif1" | "rtranif1" | "rtranif0";
rules pass_switchtype ::= "tran" | "rtran";

-- A.4 Instantiations 
-- A.4.1 Instantiation 
-- A.4.1.1 Module instantiation (Done)

rules module_instantiation ::= module_identifier maybe_parameter_value_assignment [hierarchical_instance] ;
rules parameter_value_assignment ::= "#" "(" maybe_list_of_parameter_assignments ")";
rules list_of_parameter_assignments ::= [ordered_parameter_assignment] | [named_parameter_assignment] ; 

rules ordered_parameter_assignment ::= param_expression;
rules named_parameter_assignment ::= "." parameter_identifier "(" maybe_param_expression ")";
rules hierarchical_instance ::= name_of_instance "(" maybe_list_of_port_connections ")";
rules name_of_instance ::= instance_identifier [unpacked_dimension];

rules list_of_port_connections ::= [ ordered_port_connection ] | [ named_port_connection ]; 
rules ordered_port_connection ::= [ attribute_instance ] maybe_expression;
rules named_port_connection ::= 
[ attribute_instance ] "." port_identifier 
| [ attribute_instance ] "." port_identifier "(" maybe_expression ")" 
| [ attribute_instance ] ".*";


rules maybe_expression ::= | expression;
rules maybe_list_of_port_connections ::= | list_of_port_connections;
rules maybe_param_expression ::= | param_expression;
rules maybe_parameter_value_assignment ::= | parameter_value_assignment;
rules maybe_list_of_parameter_assignments ::= | list_of_parameter_assignments;

separator nonempty ordered_port_connection ",";
separator nonempty named_port_connection ",";
separator nonempty ordered_parameter_assignment ",";
separator nonempty named_parameter_assignment ",";


-- A.4.1.2 Interface instantiation (Done)
rules interface_instantiation ::= 
interface_identifier [hierarchical_instance] |
interface_identifier parameter_value_assignment [hierarchical_instance] ;


-- A.4.1.3 Program instantiation (Done)
rules program_instantiation ::= 
program_identifier [hierarchical_instance] |
program_identifier parameter_value_assignment [hierarchical_instance] ;

-- A.4.1.4 Checker instantiation (Done) 
rules checker_instantiation ::= checker_identifier name_of_instance "(" maybe_list_of_checker_port_connections ")" ";";
rules list_of_checker_port_connections ::= [ordered_checker_port_connection] | [named_checker_port_connection];
rules ordered_checker_port_connection ::= [ attribute_instance ] maybe_property_actual_arg;

rules named_checker_port_connection ::=
[ attribute_instance ] "." port_identifier
| [ attribute_instance ] "." port_identifier "(" maybe_property_actual_arg ")"
| [ attribute_instance ] ".*";

rules maybe_list_of_checker_port_connections ::= | list_of_checker_port_connections;
rules maybe_property_actual_arg ::= | property_actual_arg;
separator nonempty ordered_checker_port_connection ",";
separator nonempty named_checker_port_connection ",";

-- A.4.2 Generated instantiation (Done)

rules generate_region ::= "generate" [ generate_item ] "endgenerate";
rules loop_generate_construct ::= "for" "(" genvar_initialization ";" genvar_expression ";" genvar_iteration ")" generate_block;
rules genvar_initialization ::= maybe_genvar genvar_identifier "=" constant_expression;
rules genvar_iteration ::= 
genvar_identifier assignment_operator genvar_expression 
| inc_or_dec_operator genvar_identifier 
| genvar_identifier inc_or_dec_operator;

rules conditional_generate_construct ::= if_generate_construct | case_generate_construct ;
rules if_generate_construct ::= "if" "(" constant_expression ")" generate_block maybe_else_generate_block;

rules case_generate_construct ::= "case" "(" constant_expression ")" [ case_generate_item ] "endcase"
rules case_generate_item ::= [constant_expression] ":" generate_block | "default" generate_block | "default" ":" generate_block ;

rules generate_block ::= generate_item 
| maybe_generate_block_identifier_header begin maybe_generate_block_identifier_footer [ generate_item ] "end" maybe_generate_block_identifier_footer;

rules generate_item ::= 
module_or_generate_item 
| interface_or_generate_item 
| checker_or_generate_item;

rules maybe_genvar ::= | genvar;
rules maybe_else_generate_block ::= | "else" generate_block;
rules maybe_generate_block_identifier_footer ::= | ":" generate_block_identifier;
rules maybe_generate_block_identifier_header ::= | generate_block_identifier ":";

separator nonempty constant_expression ",";
separator case_generate_item "";
separator generate_item "";

-- A.5 UDP declaration and instantiation 
-- A.5.1 UDP declaration
-- A.5.2 UDP ports 
-- A.5.3 UDP body (Done)
rules udp_body ::= combinational_body | sequential_body ;
rules combinational_body ::= "table" [combinational_entry] "endtable";
rules combinational_entry ::= level_input_list ":" output_symbol ";";
rules sequential_body ::= "table" [sequential_entry] "endtable" | udp_initial_statement "table" [sequential_entry] "endtable";
rules udp_initial_statement ::= "initial" output_port_identifier "=" init_val ";";
rules init_val ::= "1'b0" | "1'b1" | "1'bx" | "1'bX" | "1'B0" | "1'B1" | "1'Bx" | "1'BX" | "1" | "0";
rules sequential_entry ::= seq_input_list ":" current_state ":" next_state ";";
rules seq_input_list ::= level_input_list | edge_input_list ;
rules level_input_list ::= level_symbol [level_symbol];
rules edge_input_list ::= [level_symbol] edge_indicator [level_symbol] ;
rules edge_indicator ::= "(" level_symbol level_symbol ")" | edge_symbol ;
rules current_state ::= level_symbol ;
rules next_state ::= output_symbol | "-";
rules output_symbol ::= "0" | "1" | "x" | "X";
rules level_symbol ::= "0" | "1" | "x" | "X" | "?" | "b" | "B";
rules edge_symbol ::= "r" | "R" | "f" | "F" | "p" | "P" | "n" | "N" | "*";

separator level_symbol "";
separator nonempty sequential_entry "";
separator nonempty combinational_entry "";

-- A.5.4 UDP instantiation (Done)
rules udp_instantiation ::= 
udp_identifier [ udp_instance ] ";" |
udp_identifier delay2 [ udp_instance ] ";" |
udp_identifier drive_strength [ udp_instance ] ";" |
udp_identifier drive_strength delay2 [ udp_instance ] ";";
rules udp_instance ::= "(" output_terminal "," [input_terminal] ")" | name_of_instance "(" output_terminal "," [input_terminal] ")";

separator nonempty udp_instance ",";
separator nonempty input_terminal ",";
separator nonempty output_terminal ",";

-- A.6 Behavioral statements 
-- A.6.1 Continuous assignment and net alias statements (Done)
rules continuous_assign ::= 
"assign" list_of_net_assignments ";" | 
"assign" delay3 list_of_net_assignments ";" | 
"assign" drive_strength list_of_net_assignments ";" | 
"assign" drive_strength delay3 list_of_net_assignments ";" | 
"assign" list_of_variable_assignments ";" |
"assign" delay_control list_of_variable_assignments ";";

rules list_of_net_assignments ::= [net_assignment];
rules list_of_variable_assignments ::= [variable_assignment];

rules net_alias ::= "alias" net_lvalue "=" net_lvalue repeat_equal_net_lvalue ";" | 

rules repeat_equal_net_lvalue ::= | "=" net_lvalue | "=" net_lvalue repeat_equal_net_lvalue;

rules net_assignment ::= net_lvalue "=" expression;

separator nonempty net_assignment ",";
separator nonempty variable_assignment ",";

-- A.6.2 Procedural blocks and assignments (Done)
rules initial_construct ::= "initial" statement_or_null ;
rules always_construct ::= always_keyword statement ;
rules always_keyword ::= "always" | "always_comb" | "always_latch" | "always_ff" ;
rules final_construct ::= "final" function_statement ;
rules blocking_assignment ::= 
variable_lvalue "=" delay_or_event_control expression 
| nonrange_variable_lvalue "=" dynamic_array_new 
| hierarchical_variable_identifier 
| implicit_class_handle "." hierarchical_variable_identifier 
| class_scope hierarchical_variable_identifier 
| package_scope hierarchical_variable_identifier 
select "=" class_new 
| operator_assignment ;

rules operator_assignment ::= variable_lvalue assignment_operator expression ; 
rules assignment_operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "<<<=" | ">>>=";
rules nonblocking_assignment ::= variable_lvalue "<=" delay_or_event_control expression | variable_lvalue "<=" expression ;

rules procedural_continuous_assignment ::= 
"assign" variable_assignment 
| "deassign" variable_lvalue 
| "force" variable_assignment 
| "force" net_assignment 
| "release" variable_lvalue 
| "release" net_lvalue ;

rules variable_assignment ::= variable_lvalue "=" expression;

-- A.6.3 Parallel and sequential blocks (Done)
rules action_block ::= statement_or_null | maybe_statement "else" statement_or_null ;
rules seq_block ::= 
"begin" maybe_block_identifier_footer [ block_item_declaration ] [ statement_or_null ] 
"end" maybe_block_identifier_footer ;

rules par_block ::= 
"fork" maybe_block_identifier_footer [ block_item_declaration ] [ statement_or_null ] join_keyword maybe_block_identifier_footer;

rules join_keyword ::= "join" | "join_any" | "join_none";

rules maybe_statement ::= | statement;
rules maybe_block_identifier_footer ::= | ":" block_identifier;

-- A.6.4 Statements (Done)
statement_or_null ::= statement | [ attribute_instance ] ";";
statement ::= [ attribute_instance ] statement_item | block_identifier ":" [ attribute_instance ] statement_item ;

statement_item ::= 
blocking_assignment ";"
| nonblocking_assignment ";"
| procedural_continuous_assignment ";"
| case_statement 
| conditional_statement 
| inc_or_dec_expression ";"
| subroutine_call_statement 
| disable_statement 
| event_trigger 
| loop_statement 
| jump_statement 
| par_block 
| procedural_timing_control_statement 
| seq_block 
| wait_statement 
| procedural_assertion_statement 
| clocking_drive ";"
| randsequence_statement 
| randcase_statement 
| expect_property_statement ;

rules function_statement ::= statement ; 
rules function_statement_or_null ::= function_statement | [ attribute_instance ] ";";
rules variable_identifier_list ::= [variable_identifier];

separator nonempty variable_identifier ",";

-- A.6.5 Timing control statements (Done)
rules procedural_timing_control_statement ::= procedural_timing_control statement_or_null;
rules delay_or_event_control ::= delay_control | event_control | "repeat" "(" expression ")" event_control;
rules delay_control ::= "#" delay_value | "#" "(" mintypmax_expression ")";
rules event_control ::= 
"@" hierarchical_event_identifier 
| "@" "(" event_expression ")"
| "@""*"
| "@" "(*)"
| "@" ps_or_hierarchical_sequence_identifier;

rules event_expression ::= 
expression maybe_iff_expression
| edge_identifier expression maybe_iff_expression
| sequence_instance maybe_iff_expression 
| event_expression "or" event_expression 
| event_expression "," event_expression 
| "(" event_expression ")";

rules procedural_timing_control ::= delay_control | event_control | cycle_delay;

rules jump_statement ::= "return" maybe_expression ";" | "break" ";" | "continue" ";";

rules wait_statement ::= 
"wait" "(" expression ")" statement_or_null 
| "wait" "fork" ";"
| "wait_order" "(" [hierarchical_identifier] ")" action_block;

rules event_trigger ::= 
"->" hierarchical_event_identifier ";"
|"->>" hierarchical_event_identifier ";"
|"->>" delay_or_event_control hierarchical_event_identifier ";";

rules disable_statement ::= 
"disable" hierarchical_task_identifier ";"
| "disable" hierarchical_block_identifier ";"
| "disable" "fork" ";"

rules maybe_iff_expression ::= | "iff" expression;

-- A.6.6 Conditional statements (Done)
rules conditional_statement ::= 
"if" "(" cond_predicate ")" statement_or_null [ else_if_block ] maybe_else_statement_or_null 
| unique_priority "if" "(" cond_predicate ")" statement_or_null [ else_if_block ] maybe_else_statement_or_null;

rules unique_priority ::= "unique" | "unique0" | "priority";
rules cond_predicate ::= [expression_or_cond_pattern]; 
rules expression_or_cond_pattern ::= expression | cond_pattern; 
rules cond_pattern ::= expression "matches" pattern;

rules maybe_else_statement_or_null ::= | "else" statement_or_null;
rules else_if_block ::= "else" "if" "(" cond_predicate ")" statement_or_null;

separator else_if_block "";
separator nonempty expression_or_cond_pattern "&&&";

-- A.6.7 Case statements 
-- A.6.7.1 Patterns 
-- A.6.8 Looping statements (Done)
rules loop_statement ::= 
forever statement_or_null 
| "repeat" "(" expression ")" statement_or_null 
| "while" "(" expression ")" statement_or_null 
| "for" "(" for_initialization ";" expression ";" for_step ")" 
statement_or_null 
| "do" statement_or_null "while" "(" expression ")" ";"
| "foreach" "(" ps_or_hierarchical_array_identifier "[" loop_variables "]" ")" statement;

rules for_initialization ::= list_of_variable_assignments | [for_variable_declaration];
rules for_variable_declaration ::= data_type variable_identifier "=" expression [variable_assignment_cont]; 

rules for_step ::= [for_step_assignment];
rules for_step_assignment ::= operator_assignment | inc_or_dec_expression | function_subroutine_call ;
rules loop_variables ::= [maybe_index_variable_identifier];

rules variable_assignment_cont ::= "," variable_identifier "=" expression; 
rules maybe_index_variable_identifier ::= | index_variable_identifier;

separator nonempty for_variable_declaration ",";
separator variable_assignment_cont "";
separator nonempty for_step_assignment ",";
separator nonempty maybe_index_variable_identifier ",";

-- A.6.9 Subroutine call statements (Done)
rules subroutine_call_statement ::= subroutine_call ";" | "void" "'" "(" function_subroutine_call ")" ;

-- A.6.10 Assertion statements
-- A.6.11 Clocking block 
-- A.6.12 Randsequence 

-- A.7 Specify section 
-- A.7.1 Specify block declaration
-- A.7.2 Specify path declarations 
-- A.7.3 Specify block terminals (Done) 
rules specify_input_terminal_descriptor ::= input_identifier | input_identifier "[" constant_range_expression "]";
rules specify_output_terminal_descriptor ::= output_identifier | output_identifier "[" constant_range_expression "]"; 
rules input_identifier ::= input_port_identifier | inout_port_identifier | interface_identifier"."port_identifier;
rules output_identifier ::= output_port_identifier | inout_port_identifier | interface_identifier"."port_identifier;
-- A.7.4 Specify path delays 

-- A.7.5 System timing checks 
-- A.7.5.1 System timing check commands
-- A.7.5.2 System timing check command arguments 
-- A.7.5.3 System timing check event definitions 


-- A.8 Expressions 
-- A.8.1 Concatenations (Done)
rules concatenation ::= "{" [expression] "}";
rules constant_concatenation ::= "{" [constant_expression] "}";
rules constant_multiple_concatenation ::= "{" constant_expression constant_concatenation "}" ;
rules module_path_concatenation ::= "{" [module_path_expression] "}" ;
rules module_path_multiple_concatenation ::= "{" constant_expression module_path_concatenation "}" ;
rules multiple_concatenation ::= "{" expression concatenation "}" ;
rules streaming_concatenation ::= "{" stream_operator slice_size stream_concatenation "}" | "{" stream_operator stream_concatenation "}" ;
rules stream_operator ::= ">>" | "<<" ;
rules slice_size ::= simple_type | constant_expression;
rules stream_concatenation ::= "{" [stream_expression] "}";
rules stream_expression ::= expression | expression "with" "[" array_range_expression "]";
rules array_range_expression ::= 
expression 
| expression ":" expression 
| expression "+:" expression 
| expression "-:" expression ;
rules empty_queue ::= "{" "}" ;

separator nonempty expression ",";
separator nonempty constant_expression ",";
separator nonempty module_path_expression ",";
separator nonempty stream_expression ",";


-- A.8.2 Subroutine calls 
-- A.8.3 Expressions (Done)
rules inc_or_dec_expression ::= 
inc_or_dec_operator [ attribute_instance ] variable_lvalue 
| variable_lvalue [ attribute_instance ] inc_or_dec_operator ;
rules conditional_expression ::= cond_predicate "?" [ attribute_instance ] expression ":" expression ;

rules constant_expression ::= 
constant_primary 
| unary_operator [ attribute_instance ] constant_primary 
| constant_expression binary_operator [ attribute_instance ] constant_expression 
| constant_expression "?" [ attribute_instance ] constant_expression ":" constant_expression ;
rules constant_mintypmax_expression ::= 
constant_expression 
| constant_expression ":" constant_expression ":" constant_expression ;

rules constant_param_expression ::= constant_mintypmax_expression | data_type | "$" ;
rules param_expression ::= mintypmax_expression | data_type;

rules constant_range_expression ::= constant_expression | constant_part_select_range ;
rules constant_part_select_range ::= constant_range | constant_indexed_range ;

rules constant_range ::= constant_expression ":" constant_expression ;
rules constant_indexed_range ::= 
constant_expression "+:" constant_expression 
| constant_expression "-:" constant_expression;

rules expression ::= 
rules primary 
| unary_operator [ attribute_instance ] primary 
| inc_or_dec_expression 
| "(" operator_assignment ")"
| expression binary_operator [ attribute_instance ] expression 
| conditional_expression 
| inside_expression 
| tagged_union_expression ;

rules tagged_union_expression ::= "tagged" member_identifier maybe_expression;

rules inside_expression ::= expression "inside" [open_range_list];
rules value_range ::= expression | "[" expression ":" expression "]";

rules mintypmax_expression ::= expression | expression ":" expression ":" expression ;
rules module_path_conditional_expression ::= module_path_expression "?" [ attribute_instance ] module_path_expression ":" module_path_expression ;

rules module_path_expression ::= 
module_path_primary 
| unary_module_path_operator [ attribute_instance ] module_path_primary 
| module_path_expression binary_module_path_operator [ attribute_instance ] 
module_path_expression 
| module_path_conditional_expression 
rules module_path_mintypmax_expression ::= 
module_path_expression 
| module_path_expression ":" module_path_expression ":" module_path_expression;

rules part_select_range ::= constant_range | indexed_range ; 
rules indexed_range ::= expression "+:" constant_expression | expression "-:" constant_expression ; 
rules genvar_expression ::= constant_expression; 

separator open_range_list "";

-- A.8.4 Primaries 
-- A.8.5 Expression left-side values (Done)
rules net_lvalue ::= 
ps_or_hierarchical_net_identifier constant_select 
| "{" [net_lvalue] "}"
| assignment_pattern_net_lvalue 
| assignment_pattern_expression_type assignment_pattern_net_lvalue ;

rules variable_lvalue ::= 
hierarchical_variable_identifier select
| package_scope hierarchical_variable_identifier select
| implicit_class_handle "." hierarchical_variable_identifier select
| "{"[variable_lvalue] "}"
| assignment_pattern_variable_lvalue 
| assignment_pattern_expression_type assignment_pattern_variable_lvalue 
| streaming_concatenation;

rules nonrange_variable_lvalue ::= 
hierarchical_variable_identifier nonrange_select 
| implicit_class_handle "." hierarchical_variable_identifier nonrange_select 
| package_scope hierarchical_variable_identifier nonrange_select;

separator nonempty net_lvalue ",";
separator nonempty variable_lvalue ",";

-- A.8.6 Operators (Done) 
rules unary_operator ::= "+" | "-" | "!" | "~" | "&" | "~&" | "|" | "~|" | "^" | "~^" | "^~";
rules binary_operator ::= 
"+" | "-" | "*" | "/" | "%" | "==" | "!=" | "===" | "!==" | "==?" | "!=?" | "&&" | "||" | "**"
| "<" | "<=" | ">" | ">=" | "&" | "|" | "^" | "^~" | "~^" | ">>" | "<<" | ">>>" | "<<<"
| "->" | "<->"; 
rules inc_or_dec_operator ::= "++" | "--";
rules unary_module_path_operator ::= "!" | "~" | "&" | "~&" | "|" | "~|" | "^" | "~^" | "^~";
rules binary_module_path_operator ::= "==" | "!=" | "&&" | "||" | "&" | "|" | "^" | "^~" | "~^";


-- A.8.7 Numbers 
-- A.8.8 Strings

-- A.9 General 
-- A.9.1 Attributes (Done)
rules attribute_instance ::= "(*" [ attr_spec ] "*)";
rules attr_spec ::= attr_name | attr_name "=" constant_expression; 
rules attr_name ::= identifier ;

separator nonempty attr_spec ",";

-- A.9.2 Comments


-- A.9.3 Identifiers 
array_identifier ::= identifier 
block_identifier ::= identifier 
bin_identifier ::= identifier 
c_identifier45 ::= [ a-zA-Z_ ] { [ a-zA-Z0-9_ ] } 
cell_identifier ::= identifier 
checker_identifier ::= identifier 
class_identifier ::= identifier 
class_variable_identifier ::= variable_identifier 
clocking_identifier ::= identifier 
config_identifier ::= identifier 
const_identifier ::= identifier 
constraint_identifier ::= identifier 
covergroup_identifier ::= identifier 
covergroup_variable_identifier ::= variable_identifier 
cover_point_identifier ::= identifier 
cross_identifier ::= identifier 
dynamic_array_variable_identifier ::= variable_identifier 
enum_identifier ::= identifier 
escaped_identifier ::= "\\" {any_ASCII_character_except_white_space} white_space 
formal_identifier ::= identifier 
function_identifier ::= identifier 
generate_block_identifier ::= identifier 
genvar_identifier ::= identifier 
hierarchical_array_identifier ::= hierarchical_identifier 
hierarchical_block_identifier ::= hierarchical_identifier 
hierarchical_event_identifier ::= hierarchical_identifier 
hierarchical_identifier ::= [ "$root" "." ] { identifier constant_bit_select "." } identifier 
hierarchical_net_identifier ::= hierarchical_identifier 
hierarchical_parameter_identifier ::= hierarchical_identifier 
hierarchical_property_identifier ::= hierarchical_identifier 
hierarchical_sequence_identifier ::= hierarchical_identifier 
hierarchical_task_identifier ::= hierarchical_identifier 
hierarchical_tf_identifier ::= hierarchical_identifier 
hierarchical_variable_identifier ::= hierarchical_identifier 
identifier ::= simple_identifier | escaped_identifier 
index_variable_identifier ::= identifier 
interface_identifier ::= identifier 
interface_instance_identifier ::= identifier 
inout_port_identifier ::= identifier 
input_port_identifier ::= identifier 
instance_identifier ::= identifier 
library_identifier ::= identifier 
member_identifier ::= identifier 
method_identifier ::= identifier 
modport_identifier ::= identifier 
module_identifier ::= identifier 
net_identifier ::= identifier 
output_port_identifier ::= identifier 
package_identifier ::= identifier 
package_scope ::= package_identifier "::" | "$unit" "::"
parameter_identifier ::= identifier 
port_identifier ::= identifier 
production_identifier ::= identifier 
program_identifier ::= identifier 
property_identifier ::= identifier 
ps_class_identifier ::= [ package_scope ] class_identifier 
ps_covergroup_identifier ::= [ package_scope ] covergroup_identifier 
ps_identifier ::= [ package_scope ] identifier 
ps_or_hierarchical_array_identifier ::= [ implicit_class_handle "." | class_scope | package_scope ] hierarchical_array_identifier 
ps_or_hierarchical_net_identifier ::= [ package_scope ] net_identifier | hierarchical_net_identifier
ps_or_hierarchical_property_identifier ::= [ package_scope ] property_identifier | hierarchical_property_identifier 
ps_or_hierarchical_sequence_identifier ::= [ package_scope ] sequence_identifier | hierarchical_sequence_identifier 
ps_or_hierarchical_tf_identifier ::= [ package_scope ] tf_identifier | hierarchical_tf_identifier 
ps_parameter_identifier ::= [ package_scope | class_scope ] parameter_identifier | { generate_block_identifier [ [ constant_expression ] ] "." } parameter_identifier 
ps_type_identifier ::= [ "local::" | package_scope ] type_identifier 
sequence_identifier ::= identifier 
signal_identifier ::= identifier 
simple_identifier ::= [ a-zA-Z_ ] { [ a-zA-Z0-9_$ ] } 
specparam_identifier ::= identifier 
system_tf_identifier46 ::= $[ a-zA-Z0-9_$ ]{ [ a-zA-Z0-9_$ ] } 
task_identifier ::= identifier 
tf_identifier ::= identifier 
terminal_identifier ::= identifier 
topmodule_identifier ::= identifier 
type_identifier ::= identifier 
udp_identifier ::= identifier 
variable_identifier ::= identifier


-- A.9.4 White space 

-- Repeatables
separator library_description "" ;
separator nonempty file_path_spec "," ;
separator description "";
separator attribute_instance "";
separator package_import_declaration "";
separator package_with_attr "";
separator parameter_port_declaration_comma "";
separator nonempty port ",";
separator nonempty attribute_instance_with_ansi_port_declaration ",";
separator nonempty port_reference ",";
separator nonempty bind_target_instance ",";
separator local_parameter_declaration ";"
separator config_rule_statement "";
separator lib_cell_combined_identifier "";
separator instance_identifier_with_dot "";
separator library_identifier "";
separator nonempty named_parameter_assignment ",";
separator nonempty checker_port_item ",";
separator variable_dimension "";
separator property_qualifier "";
separator class_item_qualifier "";
separator method_qualifier "";
separator constraint_block_item "";
separator nonempty solve_before_primary ",";
separator constraint_expression "";
separator nonempty dist_item ",";
separator nonempty identifier ",";
separator nonempty package_import_item ";";
separator nonempty struct_union_member "";
separator nonempty enum_name_declaration ",";
separator packed_dimension "";
separator anonymous_program_item "";
separator scoped_class_identified_maybe_param_value_assignment "";
separator nonempty defparam_assignment ",";
separator nonempty hierarchical_instance ",";
separator nonempty hierarchical_identifier ",";